/// <summary>
/// @Autogenerated
/// This is a shortcut method.
/// Queries the <#= component.Identity #> on the entity.
/// Use TryGet<#= component.ClassName #>() if you're not sure whether the entity has the given <#= component.TypeText #>.
/// </summary>
public static <#= component.ClassName #> Get<#= component.ClassName #>(this Entity entity)
{
    Assert.False(entity is null, $"Trying to get {<#= component.ClassName #>.Index} with a null entity");
    return entity.GetComponent(<#= component.ClassName #>.Index);
}

/// <summary>
/// @Autogenerated
/// This is a shortcut method.
/// Check if the entity has the <#= component.Identity #>.
/// </summary>
public static bool <#= component.AliasOfHas #><#= component.ClassName #>(this Entity entity)
{
    Assert.False(entity is null, $"Trying to check existance of {<#= component.ClassName #>.Index} with a null entity");
    return entity.HasComponent(<#= component.ClassName #>.Index);
}

/// <summary>
/// @Autogenerated
/// This is a shortcut method.
/// Returns the <#= component.Identity #> if the entity has it, otherwise returns null.
/// </summary>
public static <#= component.ClassName #> TryGet<#= component.ClassName #>(this Entity entity)
{
    Assert.False(entity is null, $"Trying to get {<#= component.ClassName #>.Index} with a null entity");
    return entity.TryGetComponent(<#= component.ClassName #>.Index);
}

/// <summary>
/// @Autogenerated
/// This is a shortcut method.
/// Returns the <#= component.Identity #> through the out param if the entity has it, otherwise returns null.
/// This method is especially useful in cases where you need to conditionally do something with the <#= component.TypeText #>.
/// </summary>
public static bool TryGet<#= component.ClassName #>(this Entity entity, out <#= component.Identity #>)
{
    Assert.False(entity is null, $"Trying to get {<#= component.ClassName #>.Index} with a null entity");
    <#= component.TypeText #> = entity.TryGetComponent(<#= component.ClassName #>.Index);
    return <#= component.TypeText #> != null;
}

    
#region alias methods for <#= component.Identity #>  
<#  foreach (var method in component.aliasMethods) 
    { #>
/// <summary>
/// @Autogenerated
/// This is a shortcut method.
/// Queries the <#= component.Identity #> on the entity and calls <#= method.Name #> method.
/// This method should be used if you are sure the entity has the <#= component.Identity #>.
/// If you're not sure whether it has the <#= component.Identity #>, use Try<#= method.Alias #>() method instead.
/// </summary>
public static <#= method.ReturnType #> <#= method.Alias #>(this <#= method.ParamsWithActor() #>)
{
<# /* TODO: Name the actor by the function, individually */ #>
    var component = Get<#= component.ClassName #>(actor);
    <# if (!method.ReturnTypeIsVoid()) { Write("return "); } #>component.<#= method.Name #>(<#= method.JoinedParamNames() #>);
}

<#      if (method.ReturnTypeIsVoid()) 
        { #>
/// <summary>
/// @Autogenerated
/// This is a shortcut method.
/// Queries the <#= component.Identity #> on the entity and calls <#= method.Name #> method.
/// This method should be used if you are not sure whether the entity has the <#= component.Identity #>.
/// This method returns false if the <#= component.TypeText #> was not found on the entity, and otherwise true.
/// </summary>
public static bool Try<#= method.Alias #>(this <#= method.ParamsWithActor() #>)
{
    if (TryGet<#= component.ClassName #>(actor, out var component))
    {
        component.<#= method.Name #>(<#= method.JoinedParamNames()#>);
        return true;
    }
    component = default(<#= component.ClassName #>);
    return false;
}

<#      } 
        else 
        { #>
/// <summary>
/// @Autogenerated
/// This is a shortcut method.
/// Queries the <#= component.Identity #> on the entity and calls <#= method.Name #> method.
/// This method should be used if you are not sure whether the entity has the <#= component.ClassName #> component.
/// This method returns false if the <#= component.TypeText #> was not found on the entity and otherwise true.
/// The output of the function is returned via the last out parameter.
/// </summary>
public static bool Try<#= method.Alias #>(this <#= method.ParamsWithActor() #>, out <#= method.ReturnType #> value)
{
    if (TryGet<#= component.ClassName #>(actor, out var component))
    {
        value = component.<#= method.Name #>(<#= method.JoinedParamNames()#>);
        return true;
    }
    value = default(<#= method.ReturnType #>);
    return false;
}

<#      }
        if (method.ReturnTypeIsBool())
        { #>
/// <summary>
/// @Autogenerated
/// This is a shortcut method.
/// Queries the <#= component.Identity #> on the entity and calls <#= method.Name #> method.
/// This method should be used if you are not sure whether the entity has the <#= component.ClassName #> component.
/// This method returns false if the <#= component.TypeText #> was not found on the entity
/// otherwise it indicates whether the call succeeded (returns the bool output of the function).
/// </summary>
public static bool Try<#= method.Alias #>(this <#= method.ParamsWithActor() #>)
{
    if (TryGet<#= component.ClassName #>(actor, out var component))
    {
        return component.<#= method.Name #>(<#= method.JoinedParamNames()#>);
    }
    return false;
}

<#      }
    } #>
#endregion
