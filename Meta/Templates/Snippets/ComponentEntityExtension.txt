    /// <summary>
    /// @Autogenerated
    /// This is a shortcut method.
    /// Queries the <#= component.ClassName #> <#= component.TypeText() #> on the entity.
    /// Use TryGet<#= component.ClassName #>() if you're not sure whether the entity has the given <#= component.TypeText() #>.
    /// </summary>
    public static <#= component.ClassName #> Get<#= component.ClassName #>(this Entity entity)
    {
        return entity.GetComponent(<#= component.ClassName #>.Index);
    }

    /// <summary>
    /// @Autogenerated
    /// This is a shortcut method.
    /// Check if the entity has the <#= component.ClassName #> <#= component.TypeText() #>.
    /// </summary>
    public static bool Has<#= component.ClassName #>(this Entity entity)
    {
        return entity.HasComponent(<#= component.ClassName #>.Index);
    }
    
    /// <summary>
    /// @Autogenerated
    /// This is a shortcut method.
    /// Returns the <#= component.ClassName #> <#= component.TypeText() #> if the entity has it, otherwise returns null.
    /// </summary>
    public static <#= component.ClassName #> TryGet<#= component.ClassName #>(this Entity entity)
    {
        return entity.TryGetComponent(<#= component.ClassName #>.Index);
    }

    /// <summary>
    /// @Autogenerated
    /// This is a shortcut method.
    /// Returns the <#= component.ClassName #> <#= component.TypeText() #> through the out param if the entity has it, otherwise returns null.
    /// This method is especially useful in cases where you need to conditionally do something with the <#= component.TypeText() #>.
    /// <summary>
    /// @Autogenerated
    /// </summary>
    /// </summary>
    public static bool TryGet<#= component.ClassName #>(this Entity entity, out <#= component.ClassName #> <#= component.TypeText() #>)
    {
        <#= component.TypeText() #> = entity.TryGetComponent(<#= component.ClassName #>.Index);
        return <#= component.TypeText() #> == null;
    }