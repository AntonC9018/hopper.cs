        /// <summary>
        /// @Autogenerated
        /// This is a shortcut method.
        /// Queries the <#= component.Calling #> on the entity.
        /// Use TryGet<#= component.ClassName #>() if you're not sure whether the entity has the given <#= component.TypeText #>.
        /// </summary>
        public static <#= component.ClassName #> Get<#= component.ClassName #>(this Entity entity)
        {
            return entity.GetComponent(<#= component.ClassName #>.Index);
        }

        /// <summary>
        /// @Autogenerated
        /// This is a shortcut method.
        /// Check if the entity has the <#= component.Calling #>.
        /// </summary>
        public static bool <#= component.HasAlias #><#= component.ClassName #>(this Entity entity)
        {
            return entity.HasComponent(<#= component.ClassName #>.Index);
        }
        
        /// <summary>
        /// @Autogenerated
        /// This is a shortcut method.
        /// Returns the <#= component.Calling #> if the entity has it, otherwise returns null.
        /// </summary>
        public static <#= component.ClassName #> TryGet<#= component.ClassName #>(this Entity entity)
        {
            return entity.TryGetComponent(<#= component.ClassName #>.Index);
        }

        /// <summary>
        /// @Autogenerated
        /// This is a shortcut method.
        /// Returns the <#= component.Calling #> through the out param if the entity has it, otherwise returns null.
        /// This method is especially useful in cases where you need to conditionally do something with the <#= component.TypeText #>.
        /// </summary>
        public static bool TryGet<#= component.ClassName #>(this Entity entity, out <#= component.Calling #>)
        {
            <#= component.TypeText #> = entity.TryGetComponent(<#= component.ClassName #>.Index);
            return <#= component.TypeText #> != null;
        }

    
#region alias methods for <#= component.Calling #>  
<#  foreach (var method in component.aliasMethods) 
    { #>
        /// <summary>
        /// @Autogenerated
        /// This is a shortcut method.
        /// Queries the <#= component.Calling #> on the entity and calls <#= method.Name #> method.
        /// This method should be used if you are sure the entity has the <#= component.Calling #>.
        /// If you're not sure whether it has the <#= component.Calling #>, use Try<#= method.Alias #>() method instead.
        /// </summary>
        public static <#= method.ReturnType #> <#= method.Alias #>(this <#= method.ParamsWithActor() #>)
        {
<# /* TODO: Name the actor by the function, individually */ #>
            var component = Get<#= component.ClassName #>(actor);
            <# if (!method.ReturnTypeIsVoid()) { Write("return "); } #>component.<#= method.Name #>(<#= method.JoinedParamNames() #>);
        }

<#      if (method.ReturnTypeIsVoid()) 
        { #>
        /// <summary>
        /// @Autogenerated
        /// This is a shortcut method.
        /// Queries the <#= component.Calling #> on the entity and calls <#= method.Name #> method.
        /// This method should be used if you are not sure whether the entity has the <#= component.Calling #>.
        /// This method returns false if the <#= component.TypeText #> was not found on the entity
        /// otherwise it indicates whether the call succeeded.
        /// </summary>
        public static bool Try<#= method.Alias #>(this <#= method.ParamsWithActor() #>)
        {
            if (TryGet<#= component.ClassName #>(actor, out var component))
            {
                component.<#= method.Name #>(<#= method.JoinedParamNames()#>);
                return true;
            }
            component = default(<#= component.ClassName #>);
            return false;
        }

<#      } 
        else 
        { #>
        /// <summary>
        /// @Autogenerated
        /// This is a shortcut method.
        /// Queries the <#= component.Calling #> on the entity and calls <#= method.Name #> method.
        /// This method should be used if you are not sure whether the entity has the <#= component.ClassName #> component.
        /// This method returns false if the <#= component.TypeText #> was not found on the entity
        /// otherwise it indicates whether the call succeeded.
        /// The output of the function is returned via the last out parameter.
        /// </summary>
        public static bool Try<#= method.Alias #>(this <#= method.ParamsWithActor() #>, out <#= method.ReturnType #> value)
        {
            if (TryGet<#= component.ClassName #>(actor, out var component))
            {
                value = component.<#= method.Name #>(<#= method.JoinedParamNames()#>);
                return true;
            }
            value = default(<#= method.ReturnType #>);
            return false;
        }

<#      }
    } #>
#endregion
