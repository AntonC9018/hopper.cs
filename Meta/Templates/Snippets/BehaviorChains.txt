<# foreach (var chain in behavior.chains) { #>
        public readonly Chain<Context> _<#= chain.Name #>Chain;

        /// <summary>
        /// Retrieves the <#= chain.Name #> chain from the <#= behavior.ClassName #> behavior of the given entity / entity factory.
        /// </summary>
        public static readonly ChainPath<Chain<Context>> <#= chain.Name #>Path = new ChainPath<Chain<Context>>(
            (Entity entity) => entity.TryGetComponent(Index, out var component) ? component._<#= chain.Name #>Chain : null);

<# if (chain.ShouldGenerateParamsMethod) { #>
        public bool <#= chain.Name #>(<#= behavior.context.Params() #>)
        {
            Context ctx = new Context
            {
<# foreach (var name in behavior.context.ParamNames()) { #>
                <#= name #> = <#= name #>,
<# } #>
            };
            return Traverse<#= chain.Name #>(ctx);
        }

<# } // end if #>
<# if (chain.ShouldGenerateTraverseMethod) { #>
        public bool Traverse<#= chain.Name #>(Context ctx)
        {
            _<#= chain.Name #>Chain.Pass(ctx);
            return ctx.propagate;
        }

<# } // end if #>
<# } // end foreach#>
<# if (behavior.ShouldGenerateActivation) { #>
        public bool Activate(<#= behavior.context.Params() #>)
        {
            Context ctx = new Context
            {
<# foreach (var name in behavior.context.ParamNames()) { #>
                <#= name #> = <#= name #>,
<# } #>
            };
            return _CheckDo(ctx);
        }

<# } // end if #>
<# if (behavior.ShouldGenerateCheckDo) { #>
        private bool _CheckDo(Context ctx)
        {
            if (TraverseCheck(ctx)) 
            {
                TraverseDo(ctx);
                return true;
            }
            return false;
        }
<# } #>