<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="Meta" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>

<#@ include file="Templates/Snippets/ComponentEntityExtension.txt" #>

<# 
    if (behavior.HasCheck())
    {
#>
    /// <summary>
    /// @Autogenerated
    /// This is a shortcut method.
    /// Calls <#= behavior.ClassName #>'s Check() method. 
    /// Returns true if the check succeeds.
    /// The entity must have the specified behavior. 
    /// Use TryCheck<#= behavior.ActivationAlias #>() to first check if the behavior exists.
    /// </summary>
    public static bool Check<#= behavior.ActivationAlias #>(this <#= behavior.context.ParamsWithActor() #>)
    {
        var behavior = Get<#= behavior.ClassName #>(actor);
        return behavior.Check(<#= behavior.context.JoinedParamNames() #>);
    }

    /// <summary>
    /// @Autogenerated
    /// This is a shortcut method.
    /// Calls <#= behavior.ClassName #>'s Check() method. 
    /// Returns false if the entity does not have specified behavior. 
    /// Returns true if it does and the check succeeds.
    /// Use Check<#= behavior.ActivationAlias #>() if you know for sure the entity 
    /// would have the specified behavior.
    /// </summary>
    public static bool TryCheck<#= behavior.ActivationAlias #>(this <#= behavior.context.ParamsWithActor() #>)
    {
        var behavior = Get<#= behavior.ClassName #>(actor);
        return behavior.Check(<#= behavior.context.JoinedParamNames() #>);
    }
<# 
    }
    if (behavior.HasDo() && behavior.HasCheck())
    {
#>
    /// <summary>
    /// @Autogenerated
    /// This is a shortcut method.
    /// Calls <#= behavior.ClassName #>'s Do() method, that is, activates the behavior, 
    /// without calling the Check() method.
    /// Use this method to force the <#= behavior.ClassName #> behavior to activate.
    /// This method might be dangerous, so be sure to know what you're doing.
    /// </summary>
    public static void Unconditional<#= behavior.ActivationAlias #>(this <#= behavior.context.ParamsWithActor() #>)
    {
        var behavior = Get<#= behavior.ClassName #>(actor);
        behavior.Do(<#= behavior.context.JoinedParamNames() #>);
    }

    /// <summary>
    /// @Autogenerated
    /// This is a shortcut method.
    /// Calls <#= behavior.ClassName #>'s Do() method, that is, activates the behavior, 
    /// without calling the Check() method.
    /// Use this method to force some behavior to activate.
    /// Returns false if the <#= behavior.ClassName #> behavior was not found on entity,
    /// otherwise it indicates the result of the activation.
    /// This method might be dangerous, so be sure to know what you're doing.
    /// </summary>
    public static bool TryUnconditional<#= behavior.ActivationAlias #>(this <#= behavior.context.ParamsWithActor() #>)
    {
        if TryGet<#= behavior.ClassName #>(actor, out var behavior)
        {
            return behavior.Do(<#= behavior.context.JoinedParamNames() #>);
        }
        return false;
    }

<#  
    }
#>
    /// <summary>
    /// @Autogenerated
    /// This is a shortcut method.
    /// Queries the <#= behavior.ClassName #> behavior on the entity and activates it.
    /// This method should be used if you are sure the entity has the <#= behavior.ClassName #> behavior.
    /// If you're not sure whether it has the <#= behavior.ClassName #> behavior, use Try<#= behavior.ActivationAlias #>() method instead.
    /// </summary>
    public static bool <#= behavior.ActivationAlias #>(this <#= behavior.context.ParamsWithActor() #>)
    {
        var behavior = Get<#= behavior.ClassName #>(actor);
        return behavior.Activate(<#= behavior.context.JoinedParamNames() #>);
    }

    /// <summary>
    /// @Autogenerated
    /// This is a shortcut method.
    /// Queries the <#= behavior.ClassName #> behavior on the entity and activates it.
    /// This method should be used if you are not sure 
    /// whether the entity has the <#= behavior.ClassName #> behavior.
    /// This method returns false if the behavior was not found on the entity
    /// otherwise it indicates whether the activation succeeds.
    /// </summary>
    public static bool Try<#= behavior.ActivationAlias #>(this <#= behavior.context.ParamsWithActor() #>)
    {
        if (TryGet<#= behavior.ClassName #>(actor, out var behavior))
        {
            return behavior.Activate(<#= behavior.context.JoinedParamNames()#>);
        }
        return false;
    }