//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Hopper.Meta.Template {
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System.IO;
    using System;
    
    
    public partial class BehaviorPartial : IBehaviorPartialBase {
        
        private global::Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost hostValue;
        
        
        private Hopper.Meta.Template.BehaviorInfo _behaviorField;
        
        public Hopper.Meta.Template.BehaviorInfo behavior {
            get {
                return this._behaviorField;
            }
        }
        
        private Hopper.Meta.Template.ChainsInfo _chainsField;
        
        public Hopper.Meta.Template.ChainsInfo chains {
            get {
                return this._chainsField;
            }
        }
        
        private Hopper.Meta.Template.ContextInfo _contextField;
        
        public Hopper.Meta.Template.ContextInfo context {
            get {
                return this._contextField;
            }
        }
        
        private Hopper.Meta.Template.HandlerAdapterInfo[] _adaptersField;
        
        public Hopper.Meta.Template.HandlerAdapterInfo[] adapters {
            get {
                return this._adaptersField;
            }
        }
        
        private Hopper.Meta.Template.PresetInfo[] _presetsField;
        
        public Hopper.Meta.Template.PresetInfo[] presets {
            get {
                return this._presetsField;
            }
        }

        
        public global::Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost Host {
            get {
                return this.hostValue;
            }
            set {
                this.hostValue = value;
            }
        }
        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
            
            #line 1 "H:\Hopper\Meta\templates\\autogen_notice.txt"
            this.Write("// <auto-generated> \r\n// This code was generated by a tool. \r\n// Changes to this " +
                    "file may cause incorrect behavior and will be lost if \r\n// the code is regenerat" +
                    "ed. \r\n// </auto-generated> ");
            
            #line default
            #line hidden
            
            #line 14 "Templates\BehaviorPartial.tt"
            this.Write("\r\nnamespace ");
            
            #line default
            #line hidden
            
            #line 15 "Templates\BehaviorPartial.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( behavior.Namespace ));
            
            #line default
            #line hidden
            
            #line 15 "Templates\BehaviorPartial.tt"
            this.Write("\r\n{\r\n    public partial class ");
            
            #line default
            #line hidden
            
            #line 17 "Templates\BehaviorPartial.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( behavior.ClassName ));
            
            #line default
            #line hidden
            
            #line 17 "Templates\BehaviorPartial.tt"
            this.Write("\r\n    {\r\n        public static Index<");
            
            #line default
            #line hidden
            
            #line 19 "Templates\BehaviorPartial.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( behavior.ClassName ));
            
            #line default
            #line hidden
            
            #line 19 "Templates\BehaviorPartial.tt"
            this.Write("> Index;\r\n\r\n");
            
            #line default
            #line hidden
            
            #line 21 "Templates\BehaviorPartial.tt"
 foreach(var chain in chains.ChainInfos) { 
            
            #line default
            #line hidden
            
            #line 22 "Templates\BehaviorPartial.tt"
            this.Write("        public Chain<Context> _");
            
            #line default
            #line hidden
            
            #line 22 "Templates\BehaviorPartial.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( chain.Name ));
            
            #line default
            #line hidden
            
            #line 22 "Templates\BehaviorPartial.tt"
            this.Write("Chain;\r\n\r\n        /// <summary>\r\n        /// Retrieves the ");
            
            #line default
            #line hidden
            
            #line 25 "Templates\BehaviorPartial.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( chain.Name ));
            
            #line default
            #line hidden
            
            #line 25 "Templates\BehaviorPartial.tt"
            this.Write(" chain from the ");
            
            #line default
            #line hidden
            
            #line 25 "Templates\BehaviorPartial.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( behavior.ClassName ));
            
            #line default
            #line hidden
            
            #line 25 "Templates\BehaviorPartial.tt"
            this.Write(" behavior of the given entity.\r\n        /// </summary>\r\n        public static Cha" +
                    "in<Context> ");
            
            #line default
            #line hidden
            
            #line 27 "Templates\BehaviorPartial.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( chain.Name ));
            
            #line default
            #line hidden
            
            #line 27 "Templates\BehaviorPartial.tt"
            this.Write("ChainPath(Entity entity) \r\n            => entity.GetBehavior(Index)._");
            
            #line default
            #line hidden
            
            #line 28 "Templates\BehaviorPartial.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( chain.Name ));
            
            #line default
            #line hidden
            
            #line 28 "Templates\BehaviorPartial.tt"
            this.Write("Chain;\r\n\r\n        /// <summary>\r\n        /// Retrieves the ");
            
            #line default
            #line hidden
            
            #line 31 "Templates\BehaviorPartial.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( chain.Name ));
            
            #line default
            #line hidden
            
            #line 31 "Templates\BehaviorPartial.tt"
            this.Write(" chain from the ");
            
            #line default
            #line hidden
            
            #line 31 "Templates\BehaviorPartial.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( behavior.ClassName ));
            
            #line default
            #line hidden
            
            #line 31 "Templates\BehaviorPartial.tt"
            this.Write(" behavior of the given entity factory.\r\n        /// </summary>\r\n        public st" +
                    "atic Chain<Context> ");
            
            #line default
            #line hidden
            
            #line 33 "Templates\BehaviorPartial.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( chain.Name ));
            
            #line default
            #line hidden
            
            #line 33 "Templates\BehaviorPartial.tt"
            this.Write("ChainPath(EntityFactory factory) \r\n            => factory.GetBehavior(Index)._");
            
            #line default
            #line hidden
            
            #line 34 "Templates\BehaviorPartial.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( chain.Name ));
            
            #line default
            #line hidden
            
            #line 34 "Templates\BehaviorPartial.tt"
            this.Write("Chain;\r\n\r\n");
            
            #line default
            #line hidden
            
            #line 36 "Templates\BehaviorPartial.tt"
 if (chain.ShouldGenerateParamsMethod(chain.Name)) { 
            
            #line default
            #line hidden
            
            #line 37 "Templates\BehaviorPartial.tt"
            this.Write("        public static bool ");
            
            #line default
            #line hidden
            
            #line 37 "Templates\BehaviorPartial.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( chain.Name ));
            
            #line default
            #line hidden
            
            #line 37 "Templates\BehaviorPartial.tt"
            this.Write("(");
            
            #line default
            #line hidden
            
            #line 37 "Templates\BehaviorPartial.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( context.Params() ));
            
            #line default
            #line hidden
            
            #line 37 "Templates\BehaviorPartial.tt"
            this.Write(")\r\n        {\r\n            Context ctx = new Context\r\n            {\r\n             " +
                    "   ");
            
            #line default
            #line hidden
            
            #line 41 "Templates\BehaviorPartial.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( context.ParamInitialization() ));
            
            #line default
            #line hidden
            
            #line 41 "Templates\BehaviorPartial.tt"
            this.Write("\r\n            };\r\n            return Traverse");
            
            #line default
            #line hidden
            
            #line 43 "Templates\BehaviorPartial.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( chain.Name ));
            
            #line default
            #line hidden
            
            #line 43 "Templates\BehaviorPartial.tt"
            this.Write("(ctx);\r\n        }\r\n\r\n");
            
            #line default
            #line hidden
            
            #line 46 "Templates\BehaviorPartial.tt"
 } // end if 
            
            #line default
            #line hidden
            
            #line 47 "Templates\BehaviorPartial.tt"
 if (chain.ShouldGenerateTraverseMethod(chain.Name)) { 
            
            #line default
            #line hidden
            
            #line 48 "Templates\BehaviorPartial.tt"
            this.Write("        public static bool Traverse");
            
            #line default
            #line hidden
            
            #line 48 "Templates\BehaviorPartial.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( chain.Name ));
            
            #line default
            #line hidden
            
            #line 48 "Templates\BehaviorPartial.tt"
            this.Write("(Context ctx)\r\n        {\r\n            _");
            
            #line default
            #line hidden
            
            #line 50 "Templates\BehaviorPartial.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( chain.Name ));
            
            #line default
            #line hidden
            
            #line 50 "Templates\BehaviorPartial.tt"
            this.Write("Chain.Pass(ctx);\r\n            return ctx.success;\r\n        }\r\n\r\n");
            
            #line default
            #line hidden
            
            #line 54 "Templates\BehaviorPartial.tt"
 } // end if 
            
            #line default
            #line hidden
            
            #line 55 "Templates\BehaviorPartial.tt"
 } // end foreach
            
            #line default
            #line hidden
            
            #line 56 "Templates\BehaviorPartial.tt"
 if (chains.ShouldGenerateActivation()) { 
            
            #line default
            #line hidden
            
            #line 57 "Templates\BehaviorPartial.tt"
            this.Write("        public bool Activate(");
            
            #line default
            #line hidden
            
            #line 57 "Templates\BehaviorPartial.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( context.Params() ));
            
            #line default
            #line hidden
            
            #line 57 "Templates\BehaviorPartial.tt"
            this.Write(")\r\n        {\r\n            Context ctx = new Context\r\n            {\r\n             " +
                    "   ");
            
            #line default
            #line hidden
            
            #line 61 "Templates\BehaviorPartial.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( context.ParamInitialization() ));
            
            #line default
            #line hidden
            
            #line 61 "Templates\BehaviorPartial.tt"
            this.Write("\r\n            };\r\n            if (TraverseCheck(ctx)) \r\n            {\r\n          " +
                    "      TraverseDo(ctx);\r\n                return true;\r\n            }\r\n           " +
                    " return false;\r\n        }\r\n\r\n");
            
            #line default
            #line hidden
            
            #line 71 "Templates\BehaviorPartial.tt"
 } // end if 
            
            #line default
            #line hidden
            
            #line 72 "Templates\BehaviorPartial.tt"
 foreach (var adapter in adapters) { 
            
            #line default
            #line hidden
            
            #line 73 "Templates\BehaviorPartial.tt"
            this.Write("        public void ");
            
            #line default
            #line hidden
            
            #line 73 "Templates\BehaviorPartial.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( adapter.HandlerName ));
            
            #line default
            #line hidden
            
            #line 73 "Templates\BehaviorPartial.tt"
            this.Write("HandlerAdapter(Context ctx)\r\n        {\r\n            // base case: pass the contex" +
                    "t along\r\n            return ");
            
            #line default
            #line hidden
            
            #line 76 "Templates\BehaviorPartial.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( adapter.HandlerName ));
            
            #line default
            #line hidden
            
            #line 76 "Templates\BehaviorPartial.tt"
            this.Write(@"(ctx);
            // TODO: retrieve a named field from ctx (use semantic analysis)
            // TODO: retrieve a component from the actor field
            // TODO: retrieve a stat from the actor field
        }

        public static Handler<Context> ");
            
            #line default
            #line hidden
            
            #line 82 "Templates\BehaviorPartial.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( adapter.HandlerName ));
            
            #line default
            #line hidden
            
            #line 82 "Templates\BehaviorPartial.tt"
            this.Write("Handler\r\n        {\r\n            HandlerAdapter, ");
            
            #line default
            #line hidden
            
            #line 84 "Templates\BehaviorPartial.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( 5 /* some priority, retrieved from json */ ));
            
            #line default
            #line hidden
            
            #line 84 "Templates\BehaviorPartial.tt"
            this.Write("\r\n        };\r\n    \r\n");
            
            #line default
            #line hidden
            
            #line 87 "Templates\BehaviorPartial.tt"
 } // end foreach 
            
            #line default
            #line hidden
            
            #line 88 "Templates\BehaviorPartial.tt"
 foreach (var preset in presets) { 
            
            #line default
            #line hidden
            
            #line 89 "Templates\BehaviorPartial.tt"
            this.Write("        /* TODO: presets */\r\n");
            
            #line default
            #line hidden
            
            #line 90 "Templates\BehaviorPartial.tt"
 } // end foreach 
            
            #line default
            #line hidden
            
            #line 91 "Templates\BehaviorPartial.tt"
            this.Write("    }\r\n}");
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        public virtual void Initialize() {
            if ((this.Host != null)) {
                this.Host.SetFileExtension(".cs");
            }
            if ((this.Errors.HasErrors == false)) {
                bool _behaviorAcquired = false;
                if (((this.Session != null) 
                            && this.Session.ContainsKey("behavior"))) {
                    object data = this.Session["behavior"];
                    if (typeof(Hopper.Meta.Template.BehaviorInfo).IsAssignableFrom(data.GetType())) {
                        this._behaviorField = ((Hopper.Meta.Template.BehaviorInfo)(data));
                        _behaviorAcquired = true;
                    }
                    else {
                        this.Error("The type \'Hopper.Meta.Template.BehaviorInfo\' of the parameter \'behavior\' did not " +
                                "match the type passed to the template");
                    }
                }
                if (((_behaviorAcquired == false) 
                            && (this.Host != null))) {
                    string data = ((Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost)(this.Host)).ResolveParameterValue(null, null, "behavior");
                    if ((data != null)) {
                        System.ComponentModel.TypeConverter dataTypeConverter = System.ComponentModel.TypeDescriptor.GetConverter(typeof(Hopper.Meta.Template.BehaviorInfo));
                        if (((dataTypeConverter != null) 
                                    && dataTypeConverter.CanConvertFrom(typeof(string)))) {
                            this._behaviorField = ((Hopper.Meta.Template.BehaviorInfo)(dataTypeConverter.ConvertFromString(data)));
                        }
                        else {
                            this.Error("The host parameter \'behavior\' could not be converted to the type \'Hopper.Meta.Tem" +
                                    "plate.BehaviorInfo\' specified in the template");
                        }
                    }
                }
                bool _chainsAcquired = false;
                if (((this.Session != null) 
                            && this.Session.ContainsKey("chains"))) {
                    object data = this.Session["chains"];
                    if (typeof(Hopper.Meta.Template.ChainsInfo).IsAssignableFrom(data.GetType())) {
                        this._chainsField = ((Hopper.Meta.Template.ChainsInfo)(data));
                        _chainsAcquired = true;
                    }
                    else {
                        this.Error("The type \'Hopper.Meta.Template.ChainsInfo\' of the parameter \'chains\' did not matc" +
                                "h the type passed to the template");
                    }
                }
                if (((_chainsAcquired == false) 
                            && (this.Host != null))) {
                    string data = ((Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost)(this.Host)).ResolveParameterValue(null, null, "chains");
                    if ((data != null)) {
                        System.ComponentModel.TypeConverter dataTypeConverter = System.ComponentModel.TypeDescriptor.GetConverter(typeof(Hopper.Meta.Template.ChainsInfo));
                        if (((dataTypeConverter != null) 
                                    && dataTypeConverter.CanConvertFrom(typeof(string)))) {
                            this._chainsField = ((Hopper.Meta.Template.ChainsInfo)(dataTypeConverter.ConvertFromString(data)));
                        }
                        else {
                            this.Error("The host parameter \'chains\' could not be converted to the type \'Hopper.Meta.Templ" +
                                    "ate.ChainsInfo\' specified in the template");
                        }
                    }
                }
                bool _contextAcquired = false;
                if (((this.Session != null) 
                            && this.Session.ContainsKey("context"))) {
                    object data = this.Session["context"];
                    if (typeof(Hopper.Meta.Template.ContextInfo).IsAssignableFrom(data.GetType())) {
                        this._contextField = ((Hopper.Meta.Template.ContextInfo)(data));
                        _contextAcquired = true;
                    }
                    else {
                        this.Error("The type \'Hopper.Meta.Template.ContextInfo\' of the parameter \'context\' did not ma" +
                                "tch the type passed to the template");
                    }
                }
                if (((_contextAcquired == false) 
                            && (this.Host != null))) {
                    string data = ((Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost)(this.Host)).ResolveParameterValue(null, null, "context");
                    if ((data != null)) {
                        System.ComponentModel.TypeConverter dataTypeConverter = System.ComponentModel.TypeDescriptor.GetConverter(typeof(Hopper.Meta.Template.ContextInfo));
                        if (((dataTypeConverter != null) 
                                    && dataTypeConverter.CanConvertFrom(typeof(string)))) {
                            this._contextField = ((Hopper.Meta.Template.ContextInfo)(dataTypeConverter.ConvertFromString(data)));
                        }
                        else {
                            this.Error("The host parameter \'context\' could not be converted to the type \'Hopper.Meta.Temp" +
                                    "late.ContextInfo\' specified in the template");
                        }
                    }
                }
                bool _adaptersAcquired = false;
                if (((this.Session != null) 
                            && this.Session.ContainsKey("adapters"))) {
                    object data = this.Session["adapters"];
                    if (typeof(Hopper.Meta.Template.HandlerAdapterInfo[]).IsAssignableFrom(data.GetType())) {
                        this._adaptersField = ((Hopper.Meta.Template.HandlerAdapterInfo[])(data));
                        _adaptersAcquired = true;
                    }
                    else {
                        this.Error("The type \'Hopper.Meta.Template.HandlerAdapterInfo[]\' of the parameter \'adapters\' " +
                                "did not match the type passed to the template");
                    }
                }
                if (((_adaptersAcquired == false) 
                            && (this.Host != null))) {
                    string data = ((Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost)(this.Host)).ResolveParameterValue(null, null, "adapters");
                    if ((data != null)) {
                        System.ComponentModel.TypeConverter dataTypeConverter = System.ComponentModel.TypeDescriptor.GetConverter(typeof(Hopper.Meta.Template.HandlerAdapterInfo[]));
                        if (((dataTypeConverter != null) 
                                    && dataTypeConverter.CanConvertFrom(typeof(string)))) {
                            this._adaptersField = ((Hopper.Meta.Template.HandlerAdapterInfo[])(dataTypeConverter.ConvertFromString(data)));
                        }
                        else {
                            this.Error("The host parameter \'adapters\' could not be converted to the type \'Hopper.Meta.Tem" +
                                    "plate.HandlerAdapterInfo[]\' specified in the template");
                        }
                    }
                }
                bool _presetsAcquired = false;
                if (((this.Session != null) 
                            && this.Session.ContainsKey("presets"))) {
                    object data = this.Session["presets"];
                    if (typeof(Hopper.Meta.Template.PresetInfo[]).IsAssignableFrom(data.GetType())) {
                        this._presetsField = ((Hopper.Meta.Template.PresetInfo[])(data));
                        _presetsAcquired = true;
                    }
                    else {
                        this.Error("The type \'Hopper.Meta.Template.PresetInfo[]\' of the parameter \'presets\' did not m" +
                                "atch the type passed to the template");
                    }
                }
                if (((_presetsAcquired == false) 
                            && (this.Host != null))) {
                    string data = ((Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost)(this.Host)).ResolveParameterValue(null, null, "presets");
                    if ((data != null)) {
                        System.ComponentModel.TypeConverter dataTypeConverter = System.ComponentModel.TypeDescriptor.GetConverter(typeof(Hopper.Meta.Template.PresetInfo[]));
                        if (((dataTypeConverter != null) 
                                    && dataTypeConverter.CanConvertFrom(typeof(string)))) {
                            this._presetsField = ((Hopper.Meta.Template.PresetInfo[])(dataTypeConverter.ConvertFromString(data)));
                        }
                        else {
                            this.Error("The host parameter \'presets\' could not be converted to the type \'Hopper.Meta.Temp" +
                                    "late.PresetInfo[]\' specified in the template");
                        }
                    }
                }
            }

        }
    }
    
    public class BehaviorPartialBase {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((value != null)) {
                        this.formatProvider = value;
                    }
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
